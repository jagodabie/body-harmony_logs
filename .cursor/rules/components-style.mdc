---
description: UI rules for Body Harmony — Local components first, then MUI. BEM (kebab-case) + classic CSS with per-component index.css. Folders: camelCase; files: PascalCase.
globs: ["**/*.tsx", "**/*.ts"]
alwaysApply: true
---

# Rule: UI in Body Harmony — Local First → MUI (BEM + classic CSS)

## Naming & structure
- **Component folders**: camelCase (e.g., noteForm, macroForm, inputs/textField).
- **Component files**: same name as the component **in pascalCase** with `.tsx` extension (e.g., `NoteForm.tsx`).
- **Component definition**: define components as `const ComponentName = (...) => { ... }` (PascalCase). Do not import React manually (React 17+ JSX transform).
- **Styles**: each component folder contains its own `index.css` imported by the component file.
- Preferred imports use alias @ → @/components/... (configure tsconfig.json "paths" and Vite "resolve.alias").

## Priority of component sources
1. **Check for a local component** in `src/components` with the intended role/name. If it exists, **use it**.
2. If there is **no local component**, use **MUI** (`@mui/material`) as a **fallback**.
3. If the element is simple and repeatedly used, **create a local wrapper** in `src/components` around the MUI primitive, then use the wrapper everywhere (do not scatter raw MUI usage).

## Styling policy
- Use **classic CSS files** with **BEM** classes in **kebab-case**: `block__element--modifier`.
  - Examples: `.note-form`, `.note-form__label`, `.note-form__field--error`, `.save-bar__button--disabled`.
- Import styles inside the component file:
  ```tsx
  import "./index.css";
  ```
- **Do not use** MUI `sx`, Emotion `styled`, or inline `style` (except for rare one-off cases like canvas).
- You may pass `className` to MUI components and style them via BEM classes in `index.css`.
- Keep global styles in `src/styles/`; each component keeps its own `index.css` colocated.

## Recommended folder layout
```
src/components/
  button/
    index.css
    Button.tsx          // wrapper around MUI <Button> if local button does not exist yet
  inputs/
    textField/
      index.css
      TextField.tsx
  noteForm/
    index.css
    NoteForm.tsx
  macroForm/
    index.css
    MacroForm.tsx
```

## Installation (when needed)
```bash
npm i @mui/material @mui/icons-material @emotion/react @emotion/styled
# Emotion is required as peer deps for MUI; we still style via classic CSS (no sx/styled).
```

## Component template (local-first)
```tsx
// src/components/noteForm/NoteForm.tsx
import "./index.css";
// Prefer local Button wrapper if it exists
// import { Button } from "@/components/button/Button";
import { Button as MUIButton } from "@mui/material"; // fallback if no local wrapper

type NoteFormProps = {
  onSubmit: (v: { note: string }) => void;
};

export const NoteForm = ({ onSubmit }: NoteFormProps) => {
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = new FormData(e.currentTarget);
    onSubmit({ note: String(form.get("note") || "") });
  };

  return (
    <form className="note-form" onSubmit={handleSubmit}>
      <label className="note-form__label" htmlFor="note">Note</label>
      <textarea id="note" name="note" className="note-form__field" required />
      {/* Use local <Button/> if available; otherwise fallback to MUI */}
      <MUIButton type="submit" className="note-form__button" variant="contained">
        Save
      </MUIButton>
    </form>
  );
};
```

## CSS template (index.css)
```css
.note-form {
  display: flex;
  flex-direction: column;
  gap: var(--space-2);
}

.note-form__label { font-weight: 600; }

.note-form__field {
  border: 1px solid var(--border-default);
  border-radius: var(--radius-sm);
  padding: var(--space-2);
  background: var(--surface-default);
  color: var(--text-default);
}

.note-form__field--error {
  border-color: var(--danger-600);
  background-color: var(--danger-50);
}

.note-form__button { margin-top: var(--space-2); }
```

## Tests
- Interactive components must include a **React Testing Library + Vitest** test.
- Prefer role/name queries; use `data-testid` only when necessary.

### Example test
```tsx
import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { NoteForm } from "./NoteForm";

it("submits note text", async () => {
  const user = userEvent.setup();
  const onSubmit = vi.fn();
  render(<NoteForm onSubmit={onSubmit} />);
  await user.type(screen.getByLabelText(/note/i), "test");
  await user.click(screen.getByRole("button", { name: /save/i }));
  expect(onSubmit).toHaveBeenCalledWith({ note: "test" });
});
```

## Ready-to-use prompts (Cursor)
**Local-first wrapper**
```
Check if a local component exists at @/components/button/Button.
- If it exists, use it in noteForm.
- If it does not, create a wrapper at src/components/button/Button.tsx with index.css using BEM, then use the wrapper.
Return minimal diffs only.
```

**Create note form**
```
Create src/components/noteForm (NoteForm.tsx + index.css) using BEM classes and classic CSS (no sx/styled/inline styles).
Use a local Button if available; otherwise fallback to MUI. Add a basic RTL test.
Return minimal diffs only.
```
